AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: my-sam-vpc

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs "" ]

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable


  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 1, !GetAZs "" ]

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 2, !GetAZs "" ]

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  NatGatewayEIP:
    Type: AWS::EC2::EIP

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  StatsDatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref MyVPC
      GroupDescription: "Allow Lambda to access RDS"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref LambdaSecurityGroup
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref BastionSecurityGroup


  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref MyVPC
      GroupDescription: "Allow Lambda to access internal resources"

  StatsDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: my-sam-rds
      Engine: postgres
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      MasterUsername: zak
      MasterUserPassword: password
      DBName: stats
      VPCSecurityGroups:
        - !Ref StatsDatabaseSecurityGroup
      DBSubnetGroupName: !Ref RDSSubnetGroup
      PubliclyAccessible: false
      DeletionProtection: false
      SkipFinalSnapshot: true

  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnets for RDS"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  CreateSessionFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambdas/createSession.handler
      Runtime: nodejs18.x
      FunctionName: CreateSessionFunction
      CodeUri: ./dist
      Timeout: 25
      Tracing: Active
      Policies:
        - AWSXRayDaemonWriteAccess
        - AWSLambdaVPCAccessExecutionRole
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Environment:
        Variables:
          DATABASE_HOST: !GetAtt StatsDatabase.Endpoint.Address
          RUNNING_ONLINE: true
      Events:
        CreateSessionApiPost:
          Type: Api
          Properties:
            Path: /courses/{courseId}
            Method: POST

  FetchSessionFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambdas/fetchSession.handler
      Runtime: nodejs18.x
      FunctionName: FetchSessionFunction
      CodeUri: ./dist
      Timeout: 25
      Tracing: Active
      Policies:
        - AWSXRayDaemonWriteAccess
        - AWSLambdaVPCAccessExecutionRole
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Environment:
        Variables:
          DATABASE_HOST: !GetAtt StatsDatabase.Endpoint.Address
          RUNNING_ONLINE: true
      Events:
        FetchSessionApi:
          Type: Api
          Properties:
            Path: /courses/{courseId}/sessions/{sessionId}
            Method: GET

  FetchCourseLifetimeStatsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambdas/fetchCourseLifetimeStats.handler
      Runtime: nodejs18.x
      FunctionName: FetchCourseLifetimeStatsFunction
      CodeUri: ./dist
      Timeout: 25
      Tracing: Active
      Policies:
        - AWSXRayDaemonWriteAccess
        - AWSLambdaVPCAccessExecutionRole
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Environment:
        Variables:
          DATABASE_HOST: !GetAtt StatsDatabase.Endpoint.Address
      Events:
        FetchCourseLifetimeStatsApi:
          Type: Api
          Properties:
            Path: /courses/{courseId}
            Method: GET
  InitializeDatabaseFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambdas/initializeDatabase.handler
      Runtime: nodejs18.x
      FunctionName: InitializeDatabaseFunction
      CodeUri: ./dist
      Timeout: 500
      MemorySize: 1024
      Tracing: Active
      Policies:
        - AWSXRayDaemonWriteAccess
        - AWSLambdaVPCAccessExecutionRole
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Environment:
        Variables:
          DATABASE_HOST: !GetAtt StatsDatabase.Endpoint.Address
          DATABASE_PORT: 5432
          DATABASE_NAME: stats
          DATABASE_USER: zak
          DATABASE_PASSWORD: password
          RUNNING_ONLINE: true
          PRISMA_CLI_BINARY_TARGETS: native,rhel-openssl-1.0.x
      Events:
        InitializeDbApi:
          Type: Api
          Properties:
            Path: /initialize-db
            Method: POST
  BastionSSMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  BastionSSMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref BastionSSMRole
      Path: /

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref MyVPC
      GroupDescription: "No inbound ports needed for SSM-only access"

  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      ImageId: ami-0505148b3591e4c07 
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref BastionSecurityGroup
      IamInstanceProfile: !Ref BastionSSMInstanceProfile
      Tags:
        - Key: Name
          Value: bastion-host
Outputs:
  BastionInstanceId:
    Description: Bastion EC2 Instance ID
    Value: !Ref BastionHost
    Export:
      Name: BastionInstanceId